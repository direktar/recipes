<% require "dotenv"; Dotenv.load(".env") %>

# Name of your application. Used to uniquely configure containers.
service: recipes

# Name of the container image.
image: direktar/recipe

# Deploy to these servers.
servers:
  web:
    - <%= ENV["HOST_IP"] %>

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  app_port: 3000
  ssl: false
  host: <%= ENV["HOST_IP"] %>

registry:
  server: registry.hub.docker.com
  username:
    - KAMAL_REGISTRY_USERNAME
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true
    RAILS_LOG_LEVEL: debug
    HOST_IP: <%= ENV["HOST_IP"] %>
    SECRET_KEY_BASE: <%= ENV["SECRET_KEY_BASE"] %>

    DB_USER: <%= ENV["DB_USER"] %>
    DB_PASSWORD: <%= ENV["DB_PASSWORD"] %>
    DB_NAME: <%= ENV["DB_NAME"] %>

    DATABASE_URL: <%= ENV["DATABASE_URL"] %>
    REDIS_URL: <%= ENV["REDIS_URL"] %>
    ELASTIC_HOST: <%= ENV["ELASTIC_HOST"] %>
    ELASTIC_PASSWORD: <%= ENV["ELASTIC_PASSWORD"] %>
    ELASTICSEARCH_URL: <%= ENV["ELASTICSEARCH_URL"] %>

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use recipes-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "recipes_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64
  dockerfile: ./production.Dockerfile

accessories:
  postgres:
    host: <%= ENV["HOST_IP"] %>
    port: '10.0.0.2:5432:5432'
    image: postgres:16-alpine
    directories:
      - postgres:/var/lib/postgresql/data
    env:
      clear:
        DB_USER: <%= ENV["DB_USER"] %>
        DB_PASSWORD: <%= ENV["DB_PASSWORD"] %>
        DB_NAME: <%= ENV["DB_NAME"] %>

  redis:
    host: <%= ENV["HOST_IP"] %>
    port: '10.0.0.2:6379:6379'
    image: redis:8.0.1-alpine
    directories:
      - redis:/data

  elasticsearch:
    host: <%= ENV["HOST_IP"] %>
    port: '10.0.0.2:9200:9200'
    image: elasticsearch:8.16.0
    env:
      clear:
        discovery.type: "single-node"
        xpack.security.enabled: "true"
        ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ELASTIC_PASSWORD: <%= ENV["ELASTIC_PASSWORD"] %>
